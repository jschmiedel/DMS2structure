strsplit(gsub(pattern = "\\s+",replacement = " ",PDB_structure[1])," ")[[1]]
PDB_structure = readLines("../datasets/FCY1_Julia/1OX7.pdb.txt")
version()
version
View(call_epistasis)
### GB1
source("scripts/DMS2struct_script_collection.R")
load("~/Dropbox (Personal)/Science/CRG/DMS2struct/DMS2struct_analysis/test.RData")
density(score_prior_raw,from = lam_low - wt_corr, to = lam_high - wt_corr, n = (lam_high-lam_low)/lam_d + 1)
a=density(score_prior_raw,from = lam_low - wt_corr, to = lam_high - wt_corr, n = (lam_high-lam_low)/lam_d + 1)
str(a)
a=density(score_prior_raw,from = lam_low - wt_corr, to = lam_high - wt_corr, n = as.intger((lam_high-lam_low)/lam_d + 1))
a=density(score_prior_raw,from = lam_low - wt_corr, to = lam_high - wt_corr, n = as.integer((lam_high-lam_low)/lam_d + 1))
str(a)
(lam_high-lam_low)/lam_d + 1
as.integer((lam_high-lam_low)/lam_d + 1)
b = (lam_high-lam_low)/lam_d + 1
str(b)
as.integer(b)
as.integer(163)
as.integer(as.numeric(b))
as.integer(as.numeric(163))
as.integer(as.numeric(153 + 10))
str(lam_high)
str(lam_low)
str(lam_d)
str(1)
as.integer((as.numeric(lam_high)-as.numeric(lam_low))/as.numeric(lam_d) + 1)
as.integer((as.numeric(lam_high)-as.numeric(lam_low))/as.numeric(lam_d) + as.numeric(1))
as.integer(162)
as.integer(163)
as.integer((as.numeric(lam_high)-as.numeric(lam_low))/as.numeric(lam_d) + as.numeric(10))
((as.numeric(lam_high)-as.numeric(lam_low))/as.numeric(lam_d) + as.numeric(10))
lam_high
lam_high = 0.425
b = (lam_high-lam_low)/lam_d + 1
b
as.integer(b)
variable = 163
str(variable)
as.integer(variable)
b <- (lam_high-lam_low)/lam_d + 1
as.intger(b)
as.integer(b)
b
b <- as.integer((lam_high-lam_low)/lam_d) + 1
b
b <- as.integer((lam_high-lam_low)/lam_d)
b
((lam_high-lam_low)/lam_d)
str(lam_d)
lam_d = lam_d/10
((lam_high-lam_low)/lam_d)
as.integer((lam_high-lam_low)/lam_d)
as.integer(as.character((lam_high-lam_low)/lam_d))
str(b)
b=((lam_high-lam_low)/lam_d)
str(b)
as.integer(b)
as.integer(as.character(b))
filelist = list.files('scripts/')
sapply(paste0('scripts/',filelist),source,.GlobalEnv)
#first, set the working directory to the DMS2structure folder
setwd("/Users/jschmidel/Dropbox (Personal)/Science/CRG/DMS2struct/GitHub/DMS2structure/")
#source scripts
filelist = list.files('scripts/')
sapply(paste0('scripts/',filelist),source,.GlobalEnv)
create_directory_structure("GB1/")
#source scripts
filelist = list.files('scripts/')
sapply(paste0('scripts/',filelist),source,.GlobalEnv)
#create the necessary subfolder structure for all results and processed data
dataset_dir = "GB1/"
create_directory_structure(dataset_dir)
require(ggplot2)
## get Olson et al. 2014 Supp. Table S2 from
# https://www.cell.com/cms/10.1016/j.cub.2014.09.072/attachment/3a36211d-bddd-43e3-bf42-a6721f93a18b/mmc2.xlsx
## first split tableinto three tables for doubles, singles and wildtype; without the "double mutants" header and so on
## and save this to GB1/dataset/
## load dataset
wildtype = fread(paste0(dataset_dir,"dataset/GB1_Olson2014/Olson2014_TableS2_wildtype.txt"), sep = "\t", header = TRUE)
#load required packages
require(data.table)
require(ggplot2)
## get Olson et al. 2014 Supp. Table S2 from
# https://www.cell.com/cms/10.1016/j.cub.2014.09.072/attachment/3a36211d-bddd-43e3-bf42-a6721f93a18b/mmc2.xlsx
## first split tableinto three tables for doubles, singles and wildtype; without the "double mutants" header and so on
## and save this to GB1/dataset/
## load dataset
wildtype = fread(paste0(dataset_dir,"dataset/GB1_Olson2014/Olson2014_TableS2_wildtype.txt"), sep = "\t", header = TRUE)
## get Olson et al. 2014 Supp. Table S2 from
# https://www.cell.com/cms/10.1016/j.cub.2014.09.072/attachment/3a36211d-bddd-43e3-bf42-a6721f93a18b/mmc2.xlsx
## first split tableinto three tables for doubles, singles and wildtype; without the "double mutants" header and so on
## and save this to GB1/dataset/
## load dataset
wildtype = fread(paste0(dataset_dir,"dataset/Olson2014_TableS2_wildtype.txt"), sep = "\t", header = TRUE)
singles = fread(paste0(dataset_dir,"dataset/Olson2014_TableS2_singles.txt"), sep = "\t",header = TRUE)
doubles = fread(paste0(dataset_dir,"dataset/Olson2014_TableS2_doubles.txt"), sep = "\t",header = TRUE)
doubles[,c("V11","V12","V13","V14","V15","V16","V17","V18") := NULL]
## rename coloumns
colnames(wildtype) = c("count_r1_t0","count_r1_t1")
colnames(singles) = c("WT_AA","Pos","Mut","count_r1_t0","count_r1_t1")
colnames(doubles) = c("WT_AA1","Pos1","Mut1","WT_AA2","Pos2","Mut2","count_r1_t0","count_r1_t1","fitness1","fitness2")
## rearrange doubles such that always Pos1 < Pos2
doubles[Pos1 > Pos2,':=' (Pos1=Pos2,WT_AA1 = WT_AA2,Mut1 = Mut2,fitness1 = fitness2,
Pos2=Pos1,WT_AA2 = WT_AA1,Mut2 = Mut1,fitness2 = fitness1)]
## calculate fitness
wildtype[,fitness:=0]
singles[,fitness := log(count_r1_t1/count_r1_t0 * (wildtype$count_r1_t0 / wildtype$count_r1_t1))]
#plot wild-type fitness distribution
xd=density(singles$fitness,bw=.15)
plot(xd)
plot(xd)
plot(xd)
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## correct fitness value for this factor
singles[,fitness := NULL]
singles[,fitness := log(count_r1_t1/count_r1_t0 * (wildtype$count_r1_t0 / wildtype$count_r1_t1)) - correction_factor_wildtype]
#wild-type peak is not centered at 0; thus try to estimate a correction factor
#fitness peak ~ wildtype peak
correction_factor_wildtype =xd$x[xd$y==max(xd$y)]
## correct fitness value for this factor
singles[,fitness := NULL]
singles[,fitness := log(count_r1_t1/count_r1_t0 * (wildtype$count_r1_t0 / wildtype$count_r1_t1)) - correction_factor_wildtype]
doubles[,fitness := log(count_r1_t1/count_r1_t0 / (wildtype$count_r1_t1 / wildtype$count_r1_t0)) - correction_factor_wildtype]
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
dev.off()
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## plot fitness distribution
theme_set(theme_minimal())
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density()
## plot fitness distribution
theme_set(theme_classic())
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density() +
labs(x = "log(fitness)")
## plot fitness distribution
theme_set(theme_minimal())
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density() +
labs(x = "log(fitness)")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"))
## plot fitnes versus error
ggplot(rbind(wildtype[,.(fitness,sigma,type="wt")],
singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
facet_grid( ~ type)
## calculate poissonian error
wildtype[,sigma := sqrt(1/count_r1_t1 + 1/count_r1_t0)]
singles[,sigma := sqrt(1/count_r1_t1 + 1/count_r1_t0 + 1/wildtype$count_r1_t1 + 1/wildtype$count_r1_t0)]
doubles[,sigma := sqrt(1/count_r1_t1 + 1/count_r1_t0 + 1/wildtype$count_r1_t1 + 1/wildtype$count_r1_t0)]
## plot fitnes versus error
ggplot(rbind(wildtype[,.(fitness,sigma,type="wt")],
singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
facet_grid( ~ type)
# plot fitnes versus error
ggplot(rbind(wildtype[,.(fitness,sigma,type="wt")],
singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
facet_wrap( ~ type)
# plot fitnes versus error
ggplot(rbind(wildtype[,.(fitness,sigma,type="wt")],
singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)")
# plot fitnes versus error
ggplot(rbind(singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)")
# plot fitnes versus error
ggplot(rbind(singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
scale_fill_distiller(direction=1) +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)")
# plot fitnes versus error
ggplot(rbind(singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
scale_fill_distiller(direction=1,trans="log10") +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)")
# plot fitnes versus error
ggplot(rbind(wildtype[,.(fitness,sigma,type="wt")],
singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
scale_fill_distiller(direction=1,trans="log10") +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)")
# plot fitnes versus error
ggplot(rbind(singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
scale_fill_distiller(direction=1,trans="log10") +
scale_y_log10() +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)",y = "error of fitness estimate")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_error_distribution.pdf"))
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"),width=8,height=4)
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density() +
theme_minimal() +
labs(x = "log(fitness)")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"),width=8,height=4)
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"))
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density() +
theme_minimal() +
labs(x = "log(fitness)")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"))
require(cowplot)
## plot fitness distribution
ggplot(rbind(wildtype[,.(fitness,type="wt")],
singles[,.(fitness,type="singles")],
doubles[,.(fitness,type="doubles")]),
aes(fitness,color=type)) +
geom_density() +
theme_minimal() +
labs(x = "log(fitness)")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"))
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"),scale = 1)
?ggsave
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"),width=4,height = 4)
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_distribution.pdf"),width=4,height = 3)
# plot fitnes versus error
ggplot(rbind(singles[,.(fitness,sigma,type="singles")],
doubles[,.(fitness,sigma,type="doubles")]),
aes(fitness,sigma)) +
geom_hex() +
scale_fill_distiller(direction=1,trans="log10") +
scale_y_log10() +
facet_wrap( ~ type) +
theme_minimal() +
labs(x = "log(fitness)",y = "error of fitness estimate")
ggsave(paste0(dataset_dir,"results/preprocessing/fitness_error_distribution.pdf"),width=8,height=4)
## pull single mutant fitness and error into double mutant table
doubles[,fitness1 := singles[Pos == Pos1 & Mut == Mut1,fitness],.(Pos1,Mut1)]
doubles[,fitness2 := singles[Pos == Pos2 & Mut == Mut2,fitness],.(Pos2,Mut2)]
doubles[,sigma1 := singles$sigma[singles$Pos %in% Pos1 & singles$Mut %in% Mut1],by=.(Pos1,Mut1)]
doubles[,sigma2 := singles$sigma[singles$Pos %in% Pos2 & singles$Mut %in% Mut2],by=.(Pos2,Mut2)]
## mark variants with nonsensical fitness values
wildtype[,is.fitness := fitness > -Inf & !is.na(fitness)]
singles[,is.fitness := fitness > -Inf & !is.na(fitness)]
doubles[,is.fitness := fitness > -Inf & !is.na(fitness)]
## estimate lower measurement limit of fitness assay
#from singles via kernel density
xd=density((singles$fitness),bw=.15)
xd$x[xd$y==max(xd$y[xd$x < -4])]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[ fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
#both estimates are similar, thus combine them
lower_bound_F = mean(c(doubles[ fitness1 + fitness2 < -8,median(fitness,na.rm=T)],
xd$x[xd$y==max(xd$y[xd$x < -4])]))
lower_bound_F
correction_factor_wildtype
-6.064199+0.1981067
### define which variants have enough read coverage
wildtype[,is.reads0 := TRUE]
singles[,is.reads0 := TRUE]
# only throw away variants with zero output counts if unclear where above lower_fitness_bound their fitness would be
# only applies to doubles
lower_read_cut = 200
doubles[,is.reads0 := count_r1_t0 > 10 & (count_r1_t1 >= 1 | count_r1_t0 >= lower_read_cut)]
## reorder doubles table
doubles = doubles[,.SD,,.SDcols = c("Pos1","Pos2","Mut1","Mut2","WT_AA1","WT_AA2",
"count_r1_t0","count_r1_t1","is.fitness","is.reads0",
"fitness1","fitness2","sigma1","sigma2",
"fitness","sigma")]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & is.reads0 == 0, fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
# only throw away variants with zero output counts if unclear where above lower_fitness_bound their fitness would be
# only applies to doubles
lower_read_cut = 200
doubles[,is.reads0 := count_r1_t0 > 10 & (count_r1_t1 >= 1 | count_r1_t0 >= lower_read_cut)]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & is.reads0 == 0 & fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & is.reads0 == T & fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
## estimate lower measurement limit of fitness assay
#from singles via kernel density
xd=density((singles$fitness),bw=.15)
xd$x[xd$y==max(xd$y[xd$x < -4])]
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
#both estimates are similar, thus combine them
lower_bound_F = mean(c(doubles[ fitness1 + fitness2 < -8,median(fitness,na.rm=T)],
xd$x[xd$y==max(xd$y[xd$x < -4])]))
#from doubles that have expected fitness far belowthe lower measurement limit
doubles[is.fitness==T & fitness1 + fitness2 < -8,median(fitness,na.rm=T)]
xd$x[xd$y==max(xd$y[xd$x < -4])]
## define which variants have enough read coverage
# plot read distribution
ggplot(rbind(wildtype[,.(count_r1_t0,count_r1_t1,type="wt")],
singles[,.(count_r1_t0,count_r1_t1,type="singles")],
doubles[sample(1:.N,10000),.(count_r1_t0,count_r1_t1,type="doubles")]),
aes(count_r1_t0,count_r1_t1,color=type)) +
geom_point() +
# scale_fill_distiller(direction=1,trans="log10") +
scale_x_log10() +
scale_y_log10() +
# facet_wrap( ~ type) +
theme_minimal()
labs(x = "read counts in input library",
y = "read counts in output library")
## define which variants have enough read coverage
# plot read distribution
ggplot(rbind(wildtype[,.(count_r1_t0,count_r1_t1,type="wt")],
singles[,.(count_r1_t0,count_r1_t1,type="singles")],
doubles[sample(1:.N,10000),.(count_r1_t0,count_r1_t1,type="doubles")]),
aes(count_r1_t0,count_r1_t1,color=type)) +
geom_point() +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
labs(x = "read counts in input library",
y = "read counts in output library")
ggsave(paste0(dataset_dir,"results/preprocessing/readcounts_input_output.pdf"),width=4,height=4)
ggsave(paste0(dataset_dir,"results/preprocessing/readcounts_input_output.pdf"),width=6,height=6)
# plot this
ggplot() +
geom_hex(data=doubles[is.fitness],aes(x=count_r1_t0,y=fitness),bins=75) +
scale_fill_gradient(low="gray95", high = "dodgerblue4") +
scale_x_log10(breaks=10^seq(0,5,1)) +
geom_hline(yintercept = lower_bound_F,color="red",linetype=2) +
geom_hline(yintercept = 0,color="black",linetype=2) +
#plot input read restrictions
geom_line(data=data.frame(x=c(10.5,10.5),y=c(log(0.75/10.5*wildtype[[1]][,counts_t0/counts_t1]),2.5)), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(10.5,lower_read_cut[[1]]),
y=c(log(0.75/10.5*wildtype[[1]][,counts_t0/counts_t1]),
log(0.75/lower_read_cut[[1]]*wildtype[[1]][,counts_t0/counts_t1]))), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(lower_read_cut[[1]],lower_read_cut[[1]]),
y=c(log(0.75/lower_read_cut[[1]]*wildtype[[1]][,counts_t0/counts_t1]),-8)), aes(x,y),color="red") +
geom_text(data = data.frame(x=11,y=2,
label = paste0(">> ",round(doubles[is.reads0==T,.N]/doubles[,.N],digits=2)*100,"%")),
aes(x,y,label=label),hjust=0) +
coord_cartesian(xlim=c(1,10^5),expand=c(0,0)) +
scale_y_continuous(breaks=seq(-10,2.5,2.5)) +
labs(y="fitness (log)", x="sequencing reads input",fill = "# variants")
# plot this
ggplot() +
geom_hex(data=doubles[is.fitness==T],aes(x=count_r1_t0,y=fitness),bins=75) +
scale_fill_gradient(low="gray95", high = "dodgerblue4") +
scale_x_log10(breaks=10^seq(0,5,1)) +
geom_hline(yintercept = lower_bound_F,color="red",linetype=2) +
geom_hline(yintercept = 0,color="black",linetype=2) +
#plot input read restrictions
geom_line(data=data.frame(x=c(10.5,10.5),y=c(log(0.75/10.5*wildtype[[1]][,counts_t0/counts_t1]),2.5)), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(10.5,lower_read_cut[[1]]),
y=c(log(0.75/10.5*wildtype[[1]][,counts_t0/counts_t1]),
log(0.75/lower_read_cut[[1]]*wildtype[[1]][,counts_t0/counts_t1]))), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(lower_read_cut[[1]],lower_read_cut[[1]]),
y=c(log(0.75/lower_read_cut[[1]]*wildtype[[1]][,counts_t0/counts_t1]),-8)), aes(x,y),color="red") +
geom_text(data = data.frame(x=11,y=2,
label = paste0(">> ",round(doubles[is.reads0==T,.N]/doubles[,.N],digits=2)*100,"%")),
aes(x,y,label=label),hjust=0) +
coord_cartesian(xlim=c(1,10^5),expand=c(0,0)) +
scale_y_continuous(breaks=seq(-10,2.5,2.5)) +
labs(y="fitness (log)", x="sequencing reads input",fill = "# variants")
# plot this
ggplot() +
geom_hex(data=doubles[is.fitness==T],aes(x=count_r1_t0,y=fitness),bins=75) +
scale_fill_gradient(low="gray95", high = "dodgerblue4") +
scale_x_log10(breaks=10^seq(0,5,1)) +
geom_hline(yintercept = lower_bound_F,color="red",linetype=2) +
geom_hline(yintercept = 0,color="black",linetype=2) +
#plot input read restrictions
geom_line(data=data.frame(x=c(10.5,10.5),y=c(log(0.75/10.5*wildtype[,counts_r1_t0/counts_r1_t1]),2.5)), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(10.5,lower_read_cut),
y=c(log(0.75/10.5*wildtype[,counts_r1_t0/counts_r1_t1]),
log(0.75/lower_read_cut*wildtype[,counts_r1_t0/counts_r1_t1]))), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(lower_read_cut,lower_read_cut),
y=c(log(0.75/lower_read_cut*wildtype[,counts_r1_t0/counts_r1_t1]),-8)), aes(x,y),color="red") +
geom_text(data = data.frame(x=11,y=2,
label = paste0(">> ",round(doubles[is.reads0==T,.N]/doubles[,.N],digits=2)*100,"%")),
aes(x,y,label=label),hjust=0) +
coord_cartesian(xlim=c(1,10^5),expand=c(0,0)) +
scale_y_continuous(breaks=seq(-10,2.5,2.5)) +
labs(y="fitness (log)", x="sequencing reads input",fill = "# variants")
doubles
# plot this
ggplot() +
geom_hex(data=doubles[is.fitness==T],aes(x=count_r1_t0,y=fitness),bins=75) +
scale_fill_gradient(low="gray95", high = "dodgerblue4") +
scale_x_log10(breaks=10^seq(0,5,1)) +
geom_hline(yintercept = lower_bound_F,color="red",linetype=2) +
geom_hline(yintercept = 0,color="black",linetype=2) +
#plot input read restrictions
geom_line(data=data.frame(x=c(10.5,10.5),y=c(log(0.75/10.5*wildtype[,count_r1_t0/count_r1_t1]),2.5)), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(10.5,lower_read_cut),
y=c(log(0.75/10.5*wildtype[,count_r1_t0/count_r1_t1]),
log(0.75/lower_read_cut*wildtype[,count_r1_t0/count_r1_t1]))), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(lower_read_cut,lower_read_cut),
y=c(log(0.75/lower_read_cut*wildtype[,count_r1_t0/count_r1_t1]),-8)), aes(x,y),color="red") +
geom_text(data = data.frame(x=11,y=2,
label = paste0(">> ",round(doubles[is.reads0==T,.N]/doubles[,.N],digits=2)*100,"%")),
aes(x,y,label=label),hjust=0) +
coord_cartesian(xlim=c(1,10^5),expand=c(0,0)) +
scale_y_continuous(breaks=seq(-10,2.5,2.5)) +
labs(y="fitness (log)", x="sequencing reads input",fill = "# variants")
# plot this
ggplot() +
geom_hex(data=doubles[is.fitness==T],aes(x=count_r1_t0,y=fitness),bins=75) +
scale_fill_gradient(low="gray95", high = "dodgerblue4") +
scale_x_log10(breaks=10^seq(0,5,1)) +
geom_hline(yintercept = lower_bound_F,color="black",linetype=2) +
#plot input read restrictions
geom_line(data=data.frame(x=c(10.5,10.5),y=c(log(0.75/10.5*wildtype[,count_r1_t0/count_r1_t1]),2.5)), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(10.5,lower_read_cut),
y=c(log(0.75/10.5*wildtype[,count_r1_t0/count_r1_t1]),
log(0.75/lower_read_cut*wildtype[,count_r1_t0/count_r1_t1]))), aes(x,y),color="red") +
geom_line(data=data.frame(x=c(lower_read_cut,lower_read_cut),
y=c(log(0.75/lower_read_cut*wildtype[,count_r1_t0/count_r1_t1]),-8)), aes(x,y),color="red") +
geom_text(data = data.frame(x=11,y=2,
label = paste0(">> ",round(doubles[is.reads0==T,.N]/doubles[,.N],digits=2)*100,"%")),
aes(x,y,label=label),hjust=0) +
coord_cartesian(xlim=c(1,10^5),expand=c(0,0)) +
scale_y_continuous(breaks=seq(-10,2.5,2.5)) +
theme_classic() +
labs(y="fitness (log)", x="sequencing reads input",fill = "# variants")
ggsave(paste0(dataset_dir,"results/preprocessing/readcounts_input_versus_fitness.pdf"),width=6,height=6)
ggsave(paste0(dataset_dir,"results/preprocessing/readcounts_input_versus_fitness.pdf"),width=6,height=4)
